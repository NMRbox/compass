import modeller
import modeller.automodel
import os
import urllib

class template():
    def __init__(self,name='undef',seqid=0):
        self.name=name
        if len(name)==4:
            self.chain='A'
            self.code=name
        else:
            self.chain=name[4]
            self.code=name[:4]
        self.filename=self.code+'.pdb'
        self.seqid=seqid

def genali(sequence,name='unknown',path='default'):
    ''' Generate the .ali file needed for generating the modeller structure
        sequence is a string of the residue sequence
        name is the name of the model
        path is where you want to save your .ali file. The default is ./
    '''
    if path == 'default':
        ali_path = os.path.abspath(name+'.ali')
    else:
        ali_path = path+'/'+name+'.ali'
    alifile = open(ali_path,'w')
    alifile.write('>P1; '+name+'\n')
    alifile.write('sequence:'+name+':::::::0.00:0.00\n')
    for i in range(len(sequence)/60):
        alifile.write(sequence[i*60:i*60+60]+'\n')
    if len(sequence)<60:
        i=-1
    alifile.write(sequence[i*60+60:]+'*\n')
    alifile.close()
    
def runmodeller(target,database_path='default',models_path='default',templates_path='default',working='default',\
				mod_per_temp=20,excludes=[],max_seq_id=0.95,min_seq_id=0.25,max_eval=0.01,num_iter=1,gaps=False):

    '''File requirement: A .ali Sequence File and a pdb_95.pir database file

       Parameters:
       target: a .ali file path specifying the sequence of the protein
       models_path: the folder to save the models to. Defalut is ./models
       templates_path: the folder to save the templates to. Default is ./templates
       database: the path to the pdb_95.pir folder the default is ./database
       working: the working dir. The default is ./working
       mod_per_temp: number of models to be generated by modeller, the default is 20
       excludes: list of strings specifying PDB files to be excluded from the templates
       max_seq_id: Maximum of the sequence identity for a template to be considered. Ranges from 0 to 1. Default is 0.95
       min_seq_id: Minimum of the sequence identity for a template to be considered. Ranges from 0 to 1. Default is 0.25
       
       This function returns a list of paths of the generated models
    '''
    #set log to verbose
    modeller.log.verbose()
    env = modeller.environ()
    entering_dir=os.getcwd()

    #set paths
    if database_path=='default':
        database_dir=os.path.abspath('./database')
    else:
        database_dir=os.path.abspath(database_path)
    target_file=os.path.basename(target)
    target_dir=os.path.dirname(os.path.abspath(target))
    if target_file.endswith('.ali'):
        target_name=target_file[:-4]
    if working=='default':
        if not os.path.exists('./working'):
            os.mkdir('./working')
        working_dir=os.path.abspath('./working')
    else:
        working_dir=os.path.abspath(working)
        if not os.path.exists(working_dir):
            os.mkdir(working_dir)
    
    if models_path=='default':
        if not os.path.exists('./models'):
            os.mkdir('./models')
        models_dir=os.path.abspath('./models')
    else:
        models_dir=os.path.abspath(models_path)
        if not os.path.exists(models_dir):
            os.mkdir(models_dir)

    if templates_path=='default':
        if not os.path.exists('./templates'):
            os.mkdir('./templates')
        template_dir=os.path.abspath('./templates')
    else:
        template_dir=os.path.abspath(templates_path)
        if not os.path.exists(templates_path):
            os.mkdir(templates_path)
    #cd to woring. script will cd back at the end
    os.chdir(working_dir)
    #-- Prepare the input files
    #-- Read in the sequence database

    sdb = modeller.sequence_db(env)
    sdb.read( 
        seq_database_file = database_dir+'/pdb_95.pir',
        seq_database_format='PIR',
        chains_list='ALL',
        minmax_db_seq_len=(30, 4000),
        clean_sequences=True
    )

    #-- Write the sequence database in binary form
    sdb.write(
        seq_database_file=database_dir+'/pdb_95.bin',
        seq_database_format='BINARY',
        chains_list='ALL'
    )

    #-- Now, read in the binary database
    sdb.read(
        seq_database_file=database_dir+'/pdb_95.bin',
        seq_database_format='BINARY',
        chains_list='ALL'
    )

    #-- Read in the target sequence/alignment
    target_aln = modeller.alignment(env)
    target_aln.append(file=target_dir+'/'+target_file, alignment_format='PIR', align_codes='ALL')

    #-- Convert the input sequence/alignment into
    #   profile format
    target_prf = target_aln.to_profile()

    #-- Scan sequence database to pick up homologous sequences
    target_prf.build(sdb, matrix_offset=-450, rr_file='${LIB}/blosum62.sim.mat',
              gap_penalties_1d=(-500, -50), n_prof_iterations=num_iter,
              check_profile=True, max_aln_evalue=max_eval, gaps_in_target=gaps)

    #-- Write out the profile in text format
    target_prf.write(file=working_dir+'/'+target_name+'_profile.prf', profile_format='TEXT')

    #-- Convert the profile back to alignment format
    target_aln = target_prf.to_alignment()

    #-- Write out the alignment file
    target_aln.write(file=working_dir+'/'+target_name+'_profile.ali', alignment_format='PIR')
    #CLEAN UP
    del sdb,target_aln,target_prf,env

    #Read the name of the templates
    templates=[]
    txt_input=open(working_dir+'/'+target_name+'_profile.prf','r')
    for eachline in txt_input:
        if eachline.lstrip(' ')[0]=='#':
            continue
        entries=eachline.split()
        if len(entries)!=13:
            continue
        if entries[2]!='X':
            continue
        name=entries[1]
        seqid=float(entries[10])
        templates.append(template(name,seqid))
    txt_input.close()
    del entries, eachline, txt_input, name, seqid

    #Select templates
    i=0
    while (i<len(templates)):
        if( (templates[i].code in excludes) \
             or (templates[i].seqid > max_seq_id*100) \
             or (templates[i].seqid < min_seq_id*100) \
          ):
            templates.pop(i)
        else:
            i+=1

    #Download templates pdb 
    for eachtemplate in templates:
        pdbname=eachtemplate.code.upper()
        url='http://www.rcsb.org/pdb/files/%s.pdb'%pdbname
        pdb_download=open(template_dir+'/'+pdbname.lower()+'.pdb','w')
        pdb_download.write(urllib.urlopen(url).read())
        pdb_download.close()

    del pdb_download,pdbname,url

    #model alignment 
    alnlist=[]
    for i in range(len(templates)):
        env=modeller.environ()
        aln=modeller.alignment(env)
        mdl=modeller.model(env,file=template_dir+'/'+templates[i].code,model_segment=('FIRST:'+templates[i].chain,'LAST:'+templates[i].chain))
        aln.append_model(mdl, align_codes=templates[i].name,atom_files=templates[i].filename)
        aln.append(file=target_dir+'/'+target_file,align_codes=target_name)

        aln.align2d()
        aln.write(file=working_dir+'/'+target_name+'-'+templates[i].name+'.ali', alignment_format='pir')
        aln.write(file=working_dir+'/'+target_name+'-'+templates[i].name+'.pap', alignment_format='pap')
        alnlist.append(working_dir+'/'+target_name+'-'+templates[i].name+'.ali')
    del i,aln,env

    #Make models
    filelist=[]
    for i in range(len(alnlist)):
        env=modeller.environ()
        env.io.atom_files_directory=[target_dir,working_dir,template_dir]
        a=modeller.automodel.automodel(env,alnfile=alnlist[i],
                    knowns=templates[i].name, sequence=target_name,
                    assess_methods=(modeller.automodel.assess.DOPE, modeller.automodel.assess.GA341))
        a.starting_model=1
        a.ending_model=mod_per_temp
        a.make()

        for j in range(1,mod_per_temp+1):
            scrname=target_name+'.B9999'+str(j).zfill(4)+'.pdb'
            tgtname=models_dir+'/'+target_name+'_'+templates[i].code+'.B9999'+str(j).zfill(4)+'.pdb'
            os.rename(scrname,tgtname)
            filelist.append(tgtname)
    del env,a,scrname,tgtname,i,j

    os.chdir(entering_dir)
    return filelist
